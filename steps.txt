01: understanding nextjs app structure

02: install nextjs and tailwind css and create the first template
https://nextjs.org/docs/getting-started/installation
npx create-next-app@latest
    install whats needed
    imdb-next (name of project)
    no to typescript
    yes Eslint (for typos)
    tailind css yes
    src/ directory yes
    app router yes (creatg routes)
    alias for short cut when importing packages
    alias to use @ ie default


run npm run dev (after installation)


create header and nav
create components folder in src folder
    create Header.jsx file (use rfc formatting to create Hearder function)
import the hearder in layout.js (found in src/app/layout.js) 
and place the Header component in the body before the children component
for the menu
    create a component for menu item
    ie create MenuItem.jsx file in components folder 
    use rfc to create MenuItem function
    and use MenuItem in Header.jsx file

In MenuItem component we need to pass the title, address and Icon
for the icons
    install a package called react-icons (https://react-icons.github.io/react-icons/)
        npm i react-icons
https://react-icons.github.io/react-icons/icons/ai/
import AiFillHome icon from  react-icons.ai, in Header.jsx file

In MenuItem.jsx file add title, address, Icon as props (ie MenuItem({title, address, Icon}))
styling  MenuItem.jsx  using tailwind css

Add dark mode
create dark/light mode effect using a package called next theme
    npm i next-themes
any interaction with the website should be in client side
create a Providers.jsx file in src/app folder
in Providers.jsx file use rfc (react functional component) to create Providers function, then app 'use client' for it to be a client
import ThemeProvider from next-themes
cover everthing in the return with ThemeProvider
add children as props (parameter) to the Providers fxn
In layout.js (in app folder) cover everything in the body with the Providers created

create DarkModeSwitch.jsx, rfc DarkModeSwitch fxn
    import MdLightMode MdDarkMode from react-icons/md
    import useTheme from next-themes
    create diff theme const 
    create currentTheme const 
    set currentTheme and toggle the Icon
    add onclick methods to DarkModeSwitch to change from light to dark mode


add styling to the div inside ThemeProvider which is surrounding {children}


05 CReate the about package
to create a page, go to the app directory and create a folder as name the name of the page you want to create, and inside the folder create a page called page.jsx

in app directory create about folder
    in about fodler create page.jsx file (use rfc to create a react functional component, called About)


Create the navbar component 1:08:01
create a component called Navbar.jsx inside components folder
create a component called NavbarItem.jsx inside components folder
in layout.js (found in app folder), add Navbar component (<Navbar />) after the Header component
add two NavbarItem <NavbarItem /> in Navbar
add arguments to the NavBarItem <NavbarItem title="Trending" param="fetchTrending"/>
in NavBarItem passing title and param as props NavbarItem({ title, param}) to be able to use them 
in NavbarItem, import useSearchParams to change style when nav bar item is selected
    'use client'; (useSearchParams is use in the client side)
    import { useSearchParams} from 'next/navigation'
initialise be4 return statement
    const searchParams = useSearchParams()



Fetch data from TMDB API in the home page
create a file for local viriable (we won't upload the file to github) .env.local (in project directory)
In .env.local file
    create API_KEY variable and paste api key from TMDB (ie API_KEY = apikey)
In home page ie page.js file in app folder (found in src folder)
create an API_KEY variable and process API_KEY in .env file
    const API_KEY = process.env.API_KEY;

change react functional componet to asynchronous by adding async and then create an await to wait for the results
add searchParams as props to Home function
    export default async function Home({searchParams})
getting the response thro fetch
    const res = await fetch(url);

create Results.jsx components file inside components folder (to display result from fetch)
inside home page (page.js inside app folder), call the Result component, and pass results ie data.results as prop
    <Results  results={results}/>
inside Results component get the results as prop and loop throu it

Handling errors
create error.jsx file in app folder, add rfc 
add "use client"
pass as prop error ie export default function error({error, reset}), reset means try again
import { useEffect } from 'react'
in error fxn, be4 return add
    useEffect(() => {
        console.log(error);
    }, [error]);


Add Loading effect
create loading.jsx file inside the app folder 
in loading.jsx
https://loading.io/ (to download animated svg)
after downloading the loading svg, copy and paste it in the public folder
in loading.jsx file add img tag with src spin.svg
in page.js, the fetch fxn get the data and caches it at once 
to revalidate the data every 60sec add {next: {revalidate:60}} 
setTimeout to add a delay so we can see the loading effect (for test)


design home page with card to display the results
card components
create Card.jsx file in components folder
style the div in Results.jsx so that the small size and above should be in grid (sm:grid)
small size and above should be in grid col of 2 (sm:grid-col-2) effect
max-W-6xl mx-auto to center the div
styling cards with image
add Image tag gottten from import Image from 'next/image';
    in next.config.js or next.config.mjs file found in app main directory
    in nextConfig array add 
        images: {
            domains: ['images.tmdb.org'],
        }

















